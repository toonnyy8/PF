'use strict';

var _webGlInteger = require('../variable/web-gl-integer');

var _webGlInteger2 = _interopRequireDefault(_webGlInteger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function webGlRandom(kernel) {
  // A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm And compound versions of the hashing algorithm
  var hashFunction = '\n\nint hash(int x) {\n  x += (x << 10);\n  x ^= (x >>  6);\n  x += (x <<  3);\n  x ^= (x >> 11);\n  x += (x << 15);\n  return x;\n}\n  \nint hash(uvec4 v) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w)); }';

  // Construct a float with half-open range [0:1] using low 23 bits.
  // All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
  var floatConstructFunction = '\nfloat floatConstruct(float f) {\n  const int ieeeMantissa = 0x007FFFFFu;\n  const int ieeeOne = 0x3F800000u;\n  m &= ieeeMantissa;\n  m |= ieeeOne;\n  return f - 1.0;\n}';

  // Pseudo-random value in half-open range [0:1].
  var seededRandomFunction = '\nfloat seededRandom(vec4 v) { return floatConstruct(hash(floatBitsToUint(v))); }';

  // Spatial and temporal inputs and Random per-pixel value
  var randomFunction = '\nfloat random() {\n  vec4 inputs = vec4(threadId, time); \n  float rand = seededRandom(inputs);\n  return rand;\n}';
  var time = new _webGlInteger2.default(kernel, 'time');
  kernel.addNativeVariable(time);

  kernel.on('build', function () {
    time.setLocation();
  });

  kernel.on('run', function () {
    time.value = Date.now();
  });

  return [hashFunction, floatConstructFunction, seededRandomFunction, time.getDeclarationString(), randomFunction].join('\n\n');
};